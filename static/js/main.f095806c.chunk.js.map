{"version":3,"sources":["components/DarkModeToggleSwitch.js","customHooks.js","components/FooterCustom.js","utilities.js","classes/ReplayEpisode.js","classes/Episode.js","components/PageNumbers.js","components/Thumbnail.js","components/GameInformerArticle.js","components/ReplayEpisodeComponent.js","components/FilterSearch.js","components/ReplayCollection.js","components/IsLoading.js","components/JumpToTop.js","components/YouTubePlayer.js","App.js","reportWebVitals.js","index.js"],"names":["DarkModeToggleSwitch","preferDarkQuery","useState","window","localStorage","getItem","matchMedia","matches","mode","setMode","useEffect","mediaQuery","handleChange","addEventListener","removeEventListener","useLayoutEffect","document","documentElement","setAttribute","setItem","useDarkMode","colorMode","setColorMode","darkModeSwitchTemplate","className","type","id","checked","onChange","prevState","htmlFor","FooterCustom","currentYear","Date","getFullYear","getCopyrightString","getVideoLengthInSeconds","durationStr","timeArr","split","forEach","digit","index","arr","parseInt","length","listArrayAsString","stringArray","Array","isArray","arrayItemText","arrLength","addCommasToNumber","num","isNaN","toString","replace","isEmptyObject","object","key","hasOwnProperty","ReplayEpisode","episodeData","number","episodeNumber","mainSegmentGames","mainSegmentGamesAdv","middleSegment","middleSegmentContent","secondSegment","secondSegmentGames","article","giArticle","externalLinks","details","external_links","fandomWikiURL","unshift","href","title","propsToIgnore","tempHeadingsObj","Object","entries","value","includes","otherHeadings","collection","push","totalTimeSeconds","videoLengthInSeconds","views","totalViews","likes","totalLikes","dislikes","totalDislikes","checkGamesInEpisode","addCrewToGICrew","host","featuring","checkSegmentsInEpisode","temp","this","getReplaySeason","Math","floor","replaySeasonStartEpisodes","season","segmentName","middleSegmentTitle","endsWith","url","linkSourceOptions","linkSourceKey","keys","find","segment","gameTitle","gamesPlayed","has","get","count","set","replayEpisode","game","addGameToGamesPlayed","some","str","crewArr","undefined","name","giCrew","from","crew","filter","sort","first","second","segmentTitle","segments","addSegment","firstTitle","getSegmentTitle","secondTitle","property","episodeTitle","videoLength","runtime","thumbnails","youtube","dateStr","airdate","description","tempVideoID","youtubeLink","element","slice","youtubeVideoID","getMonth","getDate","toFixed","searchTerm","obj","toLowerCase","containsSearchTerm","values","Map","ReplayEpisodeOld","PageNumbers","props","getNumDisplayedButtons","numDisplayedButtons","setNumDisplayedButtons","lastPage","ceil","maxResults","resultsPerPage","middlePage","goToPage","scrollToTop","getElementById","scrollIntoView","behavior","setCurrPage","debouncedHandleResize","func","delay","debounceTimer","clearTimeout","setTimeout","apply","arguments","debounce","newValue","currPage","pageButtonContainerTemplate","onClick","disabled","start","end","numberedPageButtons","i","createNumberedPageButtons","Thumbnail","defaultImage","standard","default","alt","width","height","src","srcSet","reduce","accumulator","currValue","sizes","GameInformerArticle","author","date","content","map","para","createArticleContent","ReplayEpisodeComponent","createSegmentComponent","createDetailsComponent","contentArr","listIndex","createListOfLinks","headline","linksArr","urlPrepend","linksNodeArr","link","target","rel","getLinkSource","createEpisodeNumberStr","cuePlaylist","dateTime","icon","faPlayCircle","style","airDateAsDateTimeAttribute","getDateString","faEye","faThumbsUp","likeRatio","entry","heading","image","caption","createSectionFromHeading","FilterSearch","searchInput","setSearchInput","filterFormRef","useRef","createSingleFieldListElement","label","filterObj","search","placeholder","required","onKeyUp","e","keyCode","preventDefault","onSearch","aria-label","faSearch","classList","toggle","current","maxHeight","scrollHeight","handleFilterToggle","faSlidersH","aria-hidden","ref","onReset","reset","form","fieldListElements","createSeasonFieldListElements","createYearFieldListElements","getSegmentsForFilterForm","createSegmentFieldListElements","getGICrewForFilterForm","person","createGICrewFieldListElements","initialState","Set","reducer","action","newState","newSelectedEpisodes","selectedEpisodes","sortByTypeNew","isAscending","reverse","newFilterState","isChecked","newSet","add","delete","filteredEpisodes","replayEpisodesArr","every","size","episode","year","containsSegment","containsCrew","shuffledEpisodes","j","random","shuffleArray","episodeArr","compareReplayEpisodesByProperty","ReplayCollection","setResultsPerPage","useReducer","state","dispatch","videoID","youtubePlayer","selectedVideoIdArray","selectedVideoIDArray","getSelectedVideoIDArray","playlistStartIndex","episodeIndex","indexOf","console","error","cueVideoById","handleDisplayedVideosMessage","useMemo","min","createTotalTimeMessage","days","hours","minutes","seconds","searchTerms","faRandom","faSyncAlt","createDisplayedEpisodesComponents","IsLoading","faSpinner","JumpToTop","containerRef","mainElement","display","getBoundingClientRect","top","faChevronCircleUp","YouTubePlayer","videoPlayerRef","videoId","opts","playerVars","iv_load_policy","modestbranding","enablejsapi","loop","origin","onReady","remove","handleOnReady","App","selectedChannel","isLoading","setIsLoading","getSelectedChannelTitle","replay","superReplay","testChamber","fetch","headers","then","response","json","data","createImageHeader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f095806c.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './DarkModeToggleSwitch.css';\r\nimport { useDarkMode } from '../customHooks.js';\r\n\r\nfunction DarkModeToggleSwitch() {\r\n    const [colorMode, setColorMode] = useDarkMode();\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    function handleOnChange() {\r\n        setColorMode(\r\n            prevState => prevState === 'light' ? 'dark' : 'light'\r\n        );\r\n    }\r\n\r\n    const darkModeSwitchTemplate = (\r\n        <div className=\"switch-container\">\r\n            <label className=\"switch\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id=\"dark-mode-checkbox\"\r\n                    checked={colorMode === 'dark'}\r\n                    onChange={handleOnChange}\r\n                />\r\n                <span className=\"slider round\"></span>\r\n            </label>\r\n            <em htmlFor=\"dark-mode-checkbox\">Dark Mode</em>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        window.matchMedia('(prefers-color-scheme: dark)').matches\r\n            ? null\r\n            : darkModeSwitchTemplate\r\n    );\r\n}\r\n\r\nexport default DarkModeToggleSwitch;","import { useState, useEffect, useLayoutEffect } from 'react';\r\n\r\nexport function useDarkMode() {\r\n    const preferDarkQuery = '(prefers-color-scheme: dark)';\r\n    const [mode, setMode] = useState(\r\n        () =>\r\n            window.localStorage.getItem('colorMode')\r\n            || (window.matchMedia(preferDarkQuery).matches ? 'dark' : 'light')\r\n    );\r\n\r\n    useEffect(() => {\r\n        const mediaQuery = window.matchMedia(preferDarkQuery);\r\n        const handleChange = () => setMode(mediaQuery.matches ? 'dark' : 'light');\r\n        mediaQuery.addEventListener('change', handleChange);\r\n\r\n        // Cleanup to remove event listener when component unmounts\r\n        return () => mediaQuery.removeEventListener('change', handleChange);\r\n    }, []);\r\n\r\n    useLayoutEffect(() => {\r\n        document.documentElement.setAttribute('data-theme', mode);\r\n        window.localStorage.setItem('colorMode', mode);\r\n    }, [mode]);\r\n\r\n    return [mode, setMode];\r\n}","import React from 'react';\r\nimport './FooterCustom.css';\r\n\r\nfunction FooterCustom() {\r\n    function getCopyrightString() {\r\n        const currentYear = new Date().getFullYear();\r\n        return currentYear === 2021\r\n            ? 2021\r\n            : `2021-${currentYear}`;\r\n    }\r\n\r\n    return (\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n                <small>\r\n                    Source Code &copy; <time id=\"copyright-current-year\">{getCopyrightString()}</time> Todd Brentlinger, Santa Cruz, CA, USA. All Rights Reserved.\r\n                </small>\r\n            </p>\r\n            <p>\r\n                <small>\r\n                    Last modified on <time id=\"lastModifiedDate\"></time>\r\n                </small>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default FooterCustom;","\"use strict\";\r\n\r\n/**\r\n * Takes duration parameter in form 00:00:00 and returns total number of seconds\r\n * @param {String} durationStr\r\n * @returns {Number}\r\n */\r\nexport function getVideoLengthInSeconds(durationStr) {\r\n    const timeArr = durationStr.split(':');\r\n    timeArr.forEach((digit, index, arr) => {\r\n        arr[index] = parseInt(digit, 10);\r\n    });\r\n\r\n    return timeArr[timeArr.length - 1] +\r\n        (timeArr.length > 1 ? timeArr[timeArr.length - 2] * 60 : 0) +\r\n        (timeArr.length > 2 ? timeArr[timeArr.length - 3] * 3600 : 0);\r\n}\r\n\r\n/**\r\n * \r\n * @param {String[]} arr\r\n * @returns {String}\r\n */\r\nexport function listArrayAsString(stringArray) {\r\n    if (!stringArray) return null;\r\n\r\n    // Check if argument is an array\r\n    if (Array.isArray(stringArray)) {\r\n        let arrayItemText = '';\r\n        // Loop through each value of array\r\n        for (let index = 0, arrLength = stringArray.length; index < arrLength; index++) {\r\n            arrayItemText += stringArray[index];\r\n            // If array length is more than 1 and index is NOT the last element\r\n            // If array length is 2, only add ' and '\r\n            // Else: If index is second to last element, add ', and ' Else add ', '\r\n            if (arrLength > 1 && index !== arrLength - 1) {\r\n                arrayItemText += (arrLength === 2) ? ' and '\r\n                    : (index === arrLength - 2) ? ', and ' : ', ';\r\n            }\r\n        }\r\n        // Return created string\r\n        return arrayItemText;\r\n    }\r\n\r\n    // If argument is string, return the same string\r\n    if (typeof stringArray === 'string')\r\n        return stringArray;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number|String} num\r\n * @returns {String}\r\n */\r\nexport function addCommasToNumber(num) {\r\n    // If num is number, convert to string\r\n    if (!isNaN(parseInt(num, 10)))\r\n        num = num.toString();\r\n    // If num is string and more than 3 digits\r\n    if (typeof num === 'string' && num.length > 3\r\n    ) {\r\n        // Add comma after every 3rd index from end\r\n        return num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    } else // Else return the num as is\r\n        return num;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} dateStr\r\n * @returns {Date|String}\r\n */\r\nexport function convertStringToDateObject(dateStr) {\r\n    if (!dateStr || dateStr.length === 0)\r\n        return undefined;\r\n\r\n    if (dateStr.includes('/') || dateStr.includes(','))\r\n        return new Date(dateStr);\r\n\r\n    return dateStr;\r\n}\r\n\r\n/**\r\n * Test if object is empty (supported by older browsers)\r\n * @param {Object} object\r\n * @returns {Boolean}\r\n */\r\nexport function isEmptyObject(object) {\r\n    for (const key in object) {\r\n        if (object.hasOwnProperty(key))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Function} func\r\n * @param {Number} delay\r\n */\r\nexport function debounce(func, delay) {\r\n    let debounceTimer;\r\n    return function () {\r\n        clearTimeout(debounceTimer);\r\n        debounceTimer = setTimeout(() => func.apply(this, arguments), delay);\r\n    };\r\n}\r\n\r\nexport function shuffleArray(arr) {\r\n    let j, temp;\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        // Pick a random index from 0 to i\r\n        j = Math.floor(Math.random() * (i + 1));\r\n\r\n        // Swap element at index i with element at random index j\r\n        temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n}","\"use strict\";\r\n\r\nimport Episode from './Episode.js';\r\nimport { isEmptyObject, getVideoLengthInSeconds } from '../utilities.js';\r\n\r\nexport default class ReplayEpisode extends Episode {\r\n    // ---------------------------------\r\n    // ---------- Constructor ----------\r\n    // ---------------------------------\r\n    constructor(episodeData) {\r\n        super(episodeData);\r\n        this.number = episodeData.episodeNumber;\r\n        this.mainSegmentGames = episodeData.mainSegmentGamesAdv;\r\n\r\n        // Middle Segment (only 3rd season)\r\n        if (episodeData.middleSegment &&\r\n            episodeData.middleSegment.replace(/-/gi, '').length) {\r\n            this.middleSegment = episodeData.middleSegment;\r\n        }\r\n\r\n        // Middle Segment Content (only 3rd season)\r\n        if (episodeData.middleSegmentContent &&\r\n            episodeData.middleSegmentContent.replace(/-/gi, '').length) {\r\n            this.middleSegmentContent = episodeData.middleSegmentContent;\r\n        }\r\n\r\n        // Second Segment\r\n        if (episodeData.secondSegment &&\r\n            episodeData.secondSegment.replace(/-/gi, '').length) {\r\n            this.secondSegment = episodeData.secondSegment;\r\n        }\r\n\r\n        // Second Segment Games\r\n        if (episodeData.secondSegmentGames &&\r\n            Array.isArray(episodeData.secondSegmentGames) &&\r\n            episodeData.secondSegmentGames.length &&\r\n            episodeData.secondSegmentGames[0].replace(/-/gi, '').length) {\r\n            this.secondSegmentGames = episodeData.secondSegmentGames;\r\n        }\r\n\r\n        // Game Informer article\r\n        if (episodeData.article)\r\n            this.giArticle = episodeData.article;\r\n\r\n        // External Links\r\n        this.externalLinks = [];\r\n        if (episodeData.details.external_links)\r\n            this.externalLinks = episodeData.details.external_links;\r\n        // Add Fandom link as first element of external links list\r\n        if (episodeData.fandomWikiURL) {\r\n            this.externalLinks.unshift(\r\n                { href: `https://replay.fandom.com${episodeData.fandomWikiURL}`, title: this.title }\r\n            );\r\n        }\r\n\r\n        // Other Headings\r\n        const propsToIgnore = [\r\n            'description', 'external_links', 'image', 'system', 'gamedate', 'airdate', 'runtime', 'host', 'featuring'\r\n        ];\r\n        let tempHeadingsObj = {};\r\n        for (const [key, value] of Object.entries(episodeData.details)) {\r\n            // Check if ignore prop\r\n            if (propsToIgnore.includes(key)) continue;\r\n            // If property is array and array is empty, continue\r\n            if (Array.isArray(value) && !value.length) continue;\r\n            // Add to tempHeadingsObj\r\n            tempHeadingsObj[key] = value;\r\n        }\r\n        // If tempHeadingsObj is NOT empty, assign to this.otherHeadingsObj\r\n        if (!isEmptyObject(tempHeadingsObj))\r\n            this.otherHeadings = tempHeadingsObj;\r\n\r\n        // Update static properties\r\n        ReplayEpisode.collection.push(this);\r\n        ReplayEpisode.totalTimeSeconds += this.videoLengthInSeconds;\r\n        if (this.views) ReplayEpisode.totalViews += this.views;\r\n        if (this.likes) ReplayEpisode.totalLikes += this.likes;\r\n        if (this.dislikes) ReplayEpisode.totalDislikes += this.dislikes;\r\n        ReplayEpisode.checkGamesInEpisode(this);\r\n        ReplayEpisode.addCrewToGICrew(this.host);\r\n        ReplayEpisode.addCrewToGICrew(this.featuring);\r\n        ReplayEpisode.checkSegmentsInEpisode(this);\r\n    }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    createEpisodeNumberStr() {\r\n        const temp = this.getReplaySeason();\r\n        if (temp[0]) // If season is 1 or higher\r\n            return `S${temp[0]}:E${temp[1]} (#${this.number})`;\r\n        else // Else season is 0 (unofficial episode)\r\n            return `Unofficial #${Math.floor(this.number * 100)}`;\r\n    }\r\n\r\n    /**\r\n     * Get replay season and season episode number\r\n     * @returns {[Number, Number]}\r\n     * @todo Make getter or static method of ReplayEpisode?\r\n     */\r\n    getReplaySeason() {\r\n        //Constant array to hold episode numbers that each season begins with.\r\n        // Episode numbers less than 1 are special unoffical episodes\r\n        const replaySeasonStartEpisodes = [1, 107, 268, 385, 443, 499]; // [S1, S2, S3, S4, S5, S6]\r\n\r\n        // Season\r\n        let season = 0;\r\n        for (let index = 0; index < replaySeasonStartEpisodes.length; index++) {\r\n            if (this.number < replaySeasonStartEpisodes[index]) {\r\n                season = index;\r\n                break;\r\n            }\r\n            // If reached end of loop, assign last season\r\n            if (index == replaySeasonStartEpisodes.length - 1) {\r\n                season = replaySeasonStartEpisodes.length;\r\n            }\r\n        }\r\n\r\n        // Season Episode\r\n        let seasonEpisode = ((season > 1) ?\r\n            this.number - replaySeasonStartEpisodes[season - 1] + 1 :\r\n            this.number);\r\n\r\n        // Return both season and seasonEpisode number\r\n        return [season, seasonEpisode];\r\n    }\r\n\r\n    /**\r\n     * Returns true if Replay episode contains segment, else false.\r\n     * @param {String} segmentName\r\n     * @returns {Boolean}\r\n     */\r\n    containsSegment(segmentName) {\r\n        // Middle Segment\r\n        if (this.middleSegment || this.middleSegmentContent) {\r\n            let middleSegmentTitle = this.middleSegment || this.middleSegmentContent;\r\n            // Check if Ad\r\n            if (middleSegmentTitle.endsWith('Ad'))\r\n                middleSegmentTitle = 'Ad';\r\n            if (middleSegmentTitle === segmentName)\r\n                return true;\r\n        }\r\n        // Second Segment\r\n        if (this.secondSegment && this.secondSegment === segmentName)\r\n            return true;\r\n        // If reach here, return false\r\n        return false;\r\n    }\r\n\r\n    // ---------------------------------------\r\n    // ---------- Static Properties ----------\r\n    // ---------------------------------------\r\n\r\n    static collection = [];\r\n    static totalTimeSeconds = 0;\r\n    static totalViews = 0;\r\n    static totalLikes = 0;\r\n    static totalDislikes = 0;\r\n    static gamesPlayed = new Map();\r\n    static giCrew = new Map();\r\n    static segments = new Map();\r\n\r\n    // ------------------------------------\r\n    // ---------- Static Methods ----------\r\n    // ------------------------------------\r\n\r\n    /**\r\n     * \r\n     * @param {String} url\r\n     * @returns {String}\r\n     * @todo Move to public method since it does NOT use static properties\r\n     */\r\n    static getLinkSource(url) {\r\n        const linkSourceOptions = {\r\n            'gameinformer': 'Game Informer',\r\n            'youtube': 'YouTube',\r\n            'fandom': 'Fandom',\r\n            'wikipedia': 'Wikipedia',\r\n            'gamespot': 'GameSpot',\r\n            'steampowered': 'Steam',\r\n        };\r\n\r\n        const linkSourceKey = Object.keys(linkSourceOptions)\r\n            .find(key => url.includes(key));\r\n\r\n        return linkSourceKey\r\n            ? ` on ${linkSourceOptions[linkSourceKey]}`\r\n            : null;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} segment\r\n     * @returns {String}\r\n     * @todo Move to public method since it does NOT use static properties\r\n     */\r\n    static getSegmentTitle(segment) {\r\n        // If segment is empty, there is no segment, return empty string\r\n        if (segment && typeof segment === 'string' && segment.length === 0)\r\n            return null;\r\n\r\n        switch (segment) {\r\n            case 'RR': return 'Replay Roulette';\r\n            case 'SRS': return 'Super Replay Showdown';\r\n            case 'YDIW': return \"You're Doing It Wrong\";\r\n            case 'ST': return 'Stress Test';\r\n            case 'RP': return 'RePorted';\r\n            case 'DP': return 'Developer Pick';\r\n            case '2037': return 'Replay 2037';\r\n            case 'HF': return 'Horror Fest';\r\n            case 'RRL': return 'Replay Real Life';\r\n            default: return segment;\r\n            // Other Segments: GI Versus, Developer Spotlight, \r\n            // Reevesplay, Moments\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} gameTitle\r\n     */\r\n    static addGameToGamesPlayed(gameTitle) {\r\n        if (this.gamesPlayed.has(gameTitle)) {\r\n            this.gamesPlayed.get(gameTitle).count++;\r\n        } else {\r\n            this.gamesPlayed.set(gameTitle, { 'count': 1 });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {ReplayEpisode} replayEpisode\r\n     */\r\n    static checkGamesInEpisode(replayEpisode) {\r\n        // Main Segment\r\n        if (replayEpisode.mainSegmentGames) {\r\n            for (const game of replayEpisode.mainSegmentGames)\r\n                this.addGameToGamesPlayed(game.title);\r\n        }\r\n        // Second Segment\r\n        if (replayEpisode.secondSegmentGames) {\r\n            for (const gameTitle of replayEpisode.secondSegmentGames)\r\n                this.addGameToGamesPlayed(gameTitle);\r\n        }\r\n        // Middle Segment\r\n        if (replayEpisode.middleSegmentContent) {\r\n            const ignoreMiddleSegments = ['A Poor Retelling of Gaming History', 'Reflections', 'Embarassing Moments'];\r\n            const ignoreMiddleSegmentsContentEndingWith = [' Ad', ' Reel', ' Skit', ' Buttz', ' Pamphlet'];\r\n            // Check segment type\r\n            if (replayEpisode.middleSegment\r\n                && ignoreMiddleSegments.includes(replayEpisode.middleSegment))\r\n                return;\r\n            // Check content ending\r\n            if (ignoreMiddleSegmentsContentEndingWith\r\n                .some(str => replayEpisode.middleSegmentContent.endsWith(str)))\r\n                return;\r\n            // If reach this point, check game title\r\n            this.addGameToGamesPlayed(replayEpisode.middleSegmentContent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String[]} crewArr\r\n     */\r\n    static addCrewToGICrew(crewArr) {\r\n        if (crewArr === undefined) return;\r\n\r\n        for (const name of crewArr) {\r\n            if (this.giCrew.has(name))\r\n                this.giCrew.set(name, this.giCrew.get(name) + 1);\r\n            else\r\n                this.giCrew.set(name, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns array of objects with crew name and appearance count filtered\r\n     * by more than one appearance and sorted alphabetically.\r\n     * @returns {Object[]}\r\n     * */\r\n    static getGICrewForFilterForm() {\r\n        return Array.from(this.giCrew, crew => { return { 'name': crew[0], 'count': crew[1] }; })\r\n            .filter(crew => crew.count > 1)\r\n            .sort((first, second) => {\r\n                if (first.name < second.name)\r\n                    return -1;\r\n                else if (first.name > second.name)\r\n                    return 1;\r\n                else\r\n                    return 0;\r\n            });\r\n    }\r\n\r\n    static addSegment(segmentTitle) {\r\n        if (this.segments.has(segmentTitle)) {\r\n            this.segments.set(segmentTitle, this.segments.get(segmentTitle) + 1);\r\n        } else {\r\n            this.segments.set(segmentTitle, 1);\r\n        }\r\n    }\r\n\r\n    static checkSegmentsInEpisode(replayEpisode) {\r\n        // Middle Segment\r\n        if (replayEpisode.middleSegment || replayEpisode.middleSegmentContent) {\r\n            let segmentTitle = replayEpisode.middleSegment || replayEpisode.middleSegmentContent;\r\n            // Check if Ad\r\n            if (segmentTitle.endsWith('Ad'))\r\n                segmentTitle = 'Ad';\r\n            this.addSegment(segmentTitle);\r\n        }\r\n        // Second Segment\r\n        if (replayEpisode.secondSegment)\r\n            this.addSegment(replayEpisode.secondSegment);\r\n    }\r\n\r\n    /**\r\n     * Returns array of objects with segment name and appearance count filtered\r\n     * by more than one appearance and sorted alphabetically.\r\n     * @returns {Object[]}\r\n     * */\r\n    static getSegmentsForFilterForm() {\r\n        return Array.from(this.segments, segment => { return { 'name': segment[0], 'count': segment[1] }; })\r\n            .filter(segment => segment.count > 1)\r\n            .sort((first, second) => {\r\n                const firstTitle = this.getSegmentTitle(first.name);\r\n                const secondTitle = this.getSegmentTitle(second.name);\r\n                if (firstTitle < secondTitle)\r\n                    return -1;\r\n                if (firstTitle > secondTitle)\r\n                    return 1;\r\n                else\r\n                    return 0;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Passed as compare function into array sort method.\r\n     * @param {ReplayEpisode} first\r\n     * @param {ReplayEpisode} second\r\n     * @param {String} property\r\n     */\r\n    static compareReplayEpisodesByProperty(first, second, property) {\r\n        if (first[property] !== undefined && second[property] !== undefined)\r\n            return first[property] - second[property];\r\n        else if (first[property] !== undefined)\r\n            return 1;\r\n        else if (second[property] !== undefined)\r\n            return -1;\r\n    }\r\n}\r\n\r\nexport class ReplayEpisodeOld {\r\n    // ---------------------------------\r\n    // ---------- Constructor ----------\r\n    // ---------------------------------\r\n    constructor(episodeData) {\r\n        this.number = episodeData.episodeNumber;\r\n        this.title = episodeData.episodeTitle;\r\n        this.mainSegmentGames = episodeData.mainSegmentGamesAdv;\r\n        this.videoLength = episodeData.details.runtime;\r\n        this.thumbnails = episodeData.youtube.thumbnails;\r\n\r\n        // Air Date\r\n        const dateStr = episodeData.details.airdate;\r\n        // If air date does not exist, assign null\r\n        if (!dateStr || dateStr.length == 0)\r\n            this.airdate = null;\r\n        else { // Else air date does exist\r\n            if (dateStr.includes('/') || dateStr.includes(','))\r\n                this.airdate = new Date(dateStr);\r\n            else\r\n                this.airdate = dateStr;\r\n        }\r\n\r\n        // Host(s)\r\n        if (episodeData.details.host)\r\n            this.host = episodeData.details.host;\r\n\r\n        // Featuring\r\n        if (episodeData.details.featuring)\r\n            this.featuring = episodeData.details.featuring;\r\n\r\n        // Description\r\n        if (Array.isArray(episodeData.details.description) &&\r\n            episodeData.details.description.length) {\r\n            this.description = episodeData.details.description;\r\n        }\r\n\r\n        // Middle Segment (only 3rd season)\r\n        if (episodeData.middleSegment &&\r\n            episodeData.middleSegment.replace(/-/gi, '').length) {\r\n            this.middleSegment = episodeData.middleSegment;\r\n        }\r\n\r\n        // Middle Segment Content (only 3rd season)\r\n        if (episodeData.middleSegmentContent &&\r\n            episodeData.middleSegmentContent.replace(/-/gi, '').length) {\r\n            this.middleSegmentContent = episodeData.middleSegmentContent;\r\n        }\r\n\r\n        // Second Segment\r\n        if (episodeData.secondSegment &&\r\n            episodeData.secondSegment.replace(/-/gi, '').length) {\r\n            this.secondSegment = episodeData.secondSegment;\r\n        }\r\n\r\n        // Second Segment Games\r\n        if (episodeData.secondSegmentGames &&\r\n            Array.isArray(episodeData.secondSegmentGames) &&\r\n            episodeData.secondSegmentGames.length &&\r\n            episodeData.secondSegmentGames[0].replace(/-/gi, '').length) {\r\n            this.secondSegmentGames = episodeData.secondSegmentGames;\r\n        }\r\n\r\n        // YouTube views/likes\r\n        if (episodeData.youtube) {\r\n            // Views\r\n            if (episodeData.youtube.views)\r\n                this.views = parseInt(episodeData.youtube.views, 10);\r\n            // Likes\r\n            if (episodeData.youtube.likes)\r\n                this.likes = parseInt(episodeData.youtube.likes, 10);\r\n            // Dislikes\r\n            if (episodeData.youtube.dislikes)\r\n                this.dislikes = parseInt(episodeData.youtube.dislikes, 10);\r\n        }\r\n\r\n        // YouTube video ID\r\n        let tempVideoID = ''; // Default empty string if NO video ID is found\r\n        if (episodeData.details && episodeData.details.external_links) {\r\n            const youtubeLink = episodeData.details.external_links\r\n                .find(element => element.href.includes('youtube'));\r\n            if (youtubeLink)\r\n                tempVideoID = youtubeLink.href.split('=')[1].slice(0, 11);\r\n        }\r\n        if (tempVideoID) this.youtubeVideoID = tempVideoID;\r\n\r\n        // Game Informer article\r\n        if (episodeData.article)\r\n            this.giArticle = episodeData.article;\r\n\r\n        // External Links\r\n        this.externalLinks = [];\r\n        if (episodeData.details.external_links)\r\n            this.externalLinks = episodeData.details.external_links;\r\n        // Add Fandom link as first element of external links list\r\n        if (episodeData.fandomWikiURL) {\r\n            this.externalLinks.unshift(\r\n                { href: `https://replay.fandom.com${episodeData.fandomWikiURL}`, title: this.title }\r\n            );\r\n        }\r\n\r\n        // Other Headings\r\n        const propsToIgnore = [\r\n            'description', 'external_links', 'image', 'system', 'gamedate', 'airdate', 'runtime', 'host', 'featuring'\r\n        ];\r\n        let tempHeadingsObj = {};\r\n        for (const [key, value] of Object.entries(episodeData.details)) {\r\n            // Check if ignore prop\r\n            if (propsToIgnore.includes(key)) continue;\r\n            // If property is array and array is empty, continue\r\n            if (Array.isArray(value) && !value.length) continue;\r\n            // Add to tempHeadingsObj\r\n            tempHeadingsObj[key] = value;\r\n        }\r\n        // If tempHeadingsObj is NOT empty, assign to this.otherHeadingsObj\r\n        if (!isEmptyObject(tempHeadingsObj))\r\n            this.otherHeadings = tempHeadingsObj;\r\n\r\n        // Update static properties\r\n        ReplayEpisode.collection.push(this);\r\n        ReplayEpisode.totalTimeSeconds += this.videoLengthInSeconds;\r\n        if (this.views) ReplayEpisode.totalViews += this.views;\r\n        if (this.likes) ReplayEpisode.totalLikes += this.likes;\r\n        if (this.dislikes) ReplayEpisode.totalDislikes += this.dislikes;\r\n        ReplayEpisode.checkGamesInEpisode(this);\r\n        ReplayEpisode.addCrewToGICrew(this.host);\r\n        ReplayEpisode.addCrewToGICrew(this.featuring);\r\n        ReplayEpisode.checkSegmentsInEpisode(this);\r\n    }\r\n\r\n    // -----------------------------\r\n    // ---------- Getters ----------\r\n    // -----------------------------\r\n\r\n    // TODO: Perhaps make a property of class instance\r\n    get videoLengthInSeconds() {\r\n        return getVideoLengthInSeconds(this.videoLength);\r\n    }\r\n\r\n    get airDateAsDateTimeAttribute() {\r\n        return `${this.airdate.getFullYear()}-${this.airdate.getMonth() + 1}-${this.airdate.getDate()}`;\r\n    }\r\n\r\n    get likeRatio() {\r\n        if (this.likes && this.dislikes)\r\n            return ((this.likes * 100) / (this.likes + this.dislikes)).toFixed(1);\r\n    }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    createEpisodeNumberStr() {\r\n        const temp = this.getReplaySeason();\r\n        if (temp[0]) // If season is 1 or higher\r\n            return `S${temp[0]}:E${temp[1]} (#${this.number})`;\r\n        else // Else season is 0 (unofficial episode)\r\n            return `Unofficial #${Math.floor(this.number * 100)}`;\r\n    }\r\n\r\n    /**\r\n     * Get replay season and season episode number\r\n     * @returns {[Number, Number]}\r\n     * @todo Make getter or static method of ReplayEpisode?\r\n     */\r\n    getReplaySeason() {\r\n        //Constant array to hold episode numbers that each season begins with.\r\n        // Episode numbers less than 1 are special unoffical episodes\r\n        const replaySeasonStartEpisodes = [1, 107, 268, 385, 443, 499]; // [S1, S2, S3, S4, S5, S6]\r\n\r\n        // Season\r\n        let season = 0;\r\n        for (let index = 0; index < replaySeasonStartEpisodes.length; index++) {\r\n            if (this.number < replaySeasonStartEpisodes[index]) {\r\n                season = index;\r\n                break;\r\n            }\r\n            // If reached end of loop, assign last season\r\n            if (index == replaySeasonStartEpisodes.length - 1) {\r\n                season = replaySeasonStartEpisodes.length;\r\n            }\r\n        }\r\n\r\n        // Season Episode\r\n        let seasonEpisode = ((season > 1) ?\r\n            this.number - replaySeasonStartEpisodes[season - 1] + 1 :\r\n            this.number);\r\n\r\n        // Return both season and seasonEpisode number\r\n        return [season, seasonEpisode];\r\n    }\r\n\r\n    getDateString() {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n            \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        return months[this.airdate.getMonth()] + ' ' + this.airdate.getDate() +\r\n            ', ' + this.airdate.getFullYear();\r\n    }\r\n\r\n    /**\r\n     * Returns true if Replay episode contains GI crew, else false.\r\n     * @param {String} name\r\n     * @returns {Boolean}\r\n     */\r\n    containsCrew(name) {\r\n        // Host\r\n        if (this.host && this.host.includes(name))\r\n            return true; \r\n        // Featuring\r\n        if (this.featuring && this.featuring.includes(name))\r\n            return true;\r\n        // If reach here, return false\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if Replay episode contains segment, else false.\r\n     * @param {String} segmentName\r\n     * @returns {Boolean}\r\n     */\r\n    containsSegment(segmentName) {\r\n        // Middle Segment\r\n        if (this.middleSegment || this.middleSegmentContent) {\r\n            let middleSegmentTitle = this.middleSegment || this.middleSegmentContent;\r\n            // Check if Ad\r\n            if (middleSegmentTitle.endsWith('Ad'))\r\n                middleSegmentTitle = 'Ad';\r\n            if (middleSegmentTitle === segmentName)\r\n                return true;\r\n        }\r\n        // Second Segment\r\n        if (this.secondSegment && this.secondSegment === segmentName)\r\n            return true;\r\n        // If reach here, return false\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Recursive function to search each property of class instance.\r\n     * @param {String} searchTerm\r\n     * @param {any} obj\r\n     * @returns {Boolean}\r\n     */\r\n    containsSearchTerm(searchTerm, obj = this) {\r\n        // String\r\n        if (typeof obj === 'string') {\r\n            return obj.toLowerCase().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Number\r\n        if (typeof obj === 'number') {\r\n            return obj.toString().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Array\r\n        if (Array.isArray(obj)) {\r\n            return obj.some(element => this.containsSearchTerm(searchTerm, element));\r\n        }\r\n        // Object\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            return Array.from(Object.values(obj))\r\n                .some(value => this.containsSearchTerm(searchTerm, value));\r\n        }\r\n        // Other\r\n        return false;\r\n    }\r\n\r\n    // ---------------------------------------\r\n    // ---------- Static Properties ----------\r\n    // ---------------------------------------\r\n\r\n    static collection = [];\r\n    static totalTimeSeconds = 0;\r\n    static totalViews = 0;\r\n    static totalLikes = 0;\r\n    static totalDislikes = 0;\r\n    static gamesPlayed = new Map();\r\n    static giCrew = new Map();\r\n    static segments = new Map();\r\n\r\n    //static selectedEpisodesState = {\r\n    //    'sort': { 'type': 'airdate', 'isAscending': false, },\r\n    //    'filter': {\r\n    //        'search': null,\r\n    //        'season': new Set(),\r\n    //        'year': new Set(),\r\n    //        'segment': new Set(),\r\n    //        'giCrew': new Set(),\r\n    //    },\r\n    //};\r\n\r\n    // ------------------------------------\r\n    // ---------- Static Methods ----------\r\n    // ------------------------------------\r\n    /*\r\n    // Shuffle\r\n    static shuffleSelected() {\r\n\r\n    }\r\n\r\n    // Reset\r\n    static resetSelected() {\r\n\r\n    }\r\n\r\n    // SortByType\r\n    static sortSelectedByType() {\r\n\r\n    }\r\n    */\r\n    /**\r\n     * \r\n     * @param {String} url\r\n     * @returns {String}\r\n     * @todo Move to public method since it does NOT use static properties\r\n     */\r\n    static getLinkSource(url) {\r\n        const linkSourceOptions = {\r\n            'gameinformer': 'Game Informer',\r\n            'youtube': 'YouTube',\r\n            'fandom': 'Fandom',\r\n            'wikipedia': 'Wikipedia',\r\n            'gamespot': 'GameSpot',\r\n            'steampowered': 'Steam',\r\n        };\r\n\r\n        const linkSourceKey = Object.keys(linkSourceOptions)\r\n            .find(key => url.includes(key));\r\n\r\n        return linkSourceKey\r\n            ? ` on ${linkSourceOptions[linkSourceKey]}`\r\n            : null;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} segment\r\n     * @returns {String}\r\n     * @todo Move to public method since it does NOT use static properties\r\n     */\r\n    static getSegmentTitle(segment) {\r\n        // If segment is empty, there is no segment, return empty string\r\n        if (segment && typeof segment === 'string' && segment.length === 0)\r\n            return null;\r\n\r\n        switch (segment) {\r\n            case 'RR': return 'Replay Roulette';\r\n            case 'SRS': return 'Super Replay Showdown';\r\n            case 'YDIW': return \"You're Doing It Wrong\";\r\n            case 'ST': return 'Stress Test';\r\n            case 'RP': return 'RePorted';\r\n            case 'DP': return 'Developer Pick';\r\n            case '2037': return 'Replay 2037';\r\n            case 'HF': return 'Horror Fest';\r\n            case 'RRL': return 'Replay Real Life';\r\n            default: return segment;\r\n            // Other Segments: GI Versus, Developer Spotlight, \r\n            // Reevesplay, Moments\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} gameTitle\r\n     */\r\n    static addGameToGamesPlayed(gameTitle) {\r\n        if (this.gamesPlayed.has(gameTitle)) {\r\n            this.gamesPlayed.get(gameTitle).count++;\r\n        } else {\r\n            this.gamesPlayed.set(gameTitle, { 'count': 1 });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {ReplayEpisode} replayEpisode\r\n     */\r\n    static checkGamesInEpisode(replayEpisode) {\r\n        // Main Segment\r\n        if (replayEpisode.mainSegmentGames) {\r\n            for (const game of replayEpisode.mainSegmentGames)\r\n                this.addGameToGamesPlayed(game.title);\r\n        }\r\n        // Second Segment\r\n        if (replayEpisode.secondSegmentGames) {\r\n            for (const gameTitle of replayEpisode.secondSegmentGames)\r\n                this.addGameToGamesPlayed(gameTitle);\r\n        }\r\n        // Middle Segment\r\n        if (replayEpisode.middleSegmentContent) {\r\n            const ignoreMiddleSegments = ['A Poor Retelling of Gaming History', 'Reflections', 'Embarassing Moments'];\r\n            const ignoreMiddleSegmentsContentEndingWith = [' Ad', ' Reel', ' Skit', ' Buttz', ' Pamphlet'];\r\n            // Check segment type\r\n            if (replayEpisode.middleSegment\r\n                && ignoreMiddleSegments.includes(replayEpisode.middleSegment))\r\n                return;\r\n            // Check content ending\r\n            if (ignoreMiddleSegmentsContentEndingWith\r\n                .some(str => replayEpisode.middleSegmentContent.endsWith(str)))\r\n                return;\r\n            // If reach this point, check game title\r\n            this.addGameToGamesPlayed(replayEpisode.middleSegmentContent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String[]} crewArr\r\n     */\r\n    static addCrewToGICrew(crewArr) {\r\n        if (crewArr === undefined) return;\r\n\r\n        for (const name of crewArr) {\r\n            if (this.giCrew.has(name))\r\n                this.giCrew.set(name, this.giCrew.get(name) + 1);\r\n            else\r\n                this.giCrew.set(name, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns array of objects with crew name and appearance count filtered\r\n     * by more than one appearance and sorted alphabetically.\r\n     * @returns {Object[]}\r\n     * */\r\n    static getGICrewForFilterForm() {\r\n        return Array.from(this.giCrew, crew => { return { 'name': crew[0], 'count': crew[1] };})\r\n            .filter(crew => crew.count > 1)\r\n            .sort((first, second) => {\r\n                if (first.name < second.name)\r\n                    return -1;\r\n                else if (first.name > second.name)\r\n                    return 1;\r\n                else\r\n                    return 0;\r\n            });\r\n    }\r\n\r\n    static addSegment(segmentTitle) {\r\n        if (this.segments.has(segmentTitle)) {\r\n            this.segments.set(segmentTitle, this.segments.get(segmentTitle) + 1);\r\n        } else {\r\n            this.segments.set(segmentTitle, 1);\r\n        }\r\n    }\r\n\r\n    static checkSegmentsInEpisode(replayEpisode) {\r\n        // Middle Segment\r\n        if (replayEpisode.middleSegment || replayEpisode.middleSegmentContent) {\r\n            let segmentTitle = replayEpisode.middleSegment || replayEpisode.middleSegmentContent;\r\n            // Check if Ad\r\n            if (segmentTitle.endsWith('Ad'))\r\n                segmentTitle = 'Ad';\r\n            this.addSegment(segmentTitle);\r\n        }\r\n        // Second Segment\r\n        if (replayEpisode.secondSegment)\r\n            this.addSegment(replayEpisode.secondSegment);\r\n    }\r\n\r\n    /**\r\n     * Returns array of objects with segment name and appearance count filtered\r\n     * by more than one appearance and sorted alphabetically.\r\n     * @returns {Object[]}\r\n     * */\r\n    static getSegmentsForFilterForm() {\r\n        return Array.from(this.segments, segment => { return { 'name': segment[0], 'count': segment[1] }; })\r\n            .filter(segment => segment.count > 1)\r\n            .sort((first, second) => {\r\n                const firstTitle = this.getSegmentTitle(first.name);\r\n                const secondTitle = this.getSegmentTitle(second.name);\r\n                if (firstTitle < secondTitle)\r\n                    return -1;\r\n                if (firstTitle > secondTitle)\r\n                    return 1;\r\n                else\r\n                    return 0;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Passed as compare function into array sort method.\r\n     * @param {ReplayEpisode} first\r\n     * @param {ReplayEpisode} second\r\n     * @param {String} property\r\n     */\r\n    static compareReplayEpisodesByProperty(first, second, property) {\r\n        if (first[property] !== undefined && second[property] !== undefined)\r\n            return first[property] - second[property];\r\n        else if (first[property] !== undefined)\r\n            return 1;\r\n        else if (second[property] !== undefined)\r\n            return -1;\r\n    }\r\n}","\"use strict\";\r\n\r\nimport { getVideoLengthInSeconds } from '../utilities.js';\r\n\r\nexport default class Episode {\r\n    // ---------------------------------\r\n    // ---------- Constructor ----------\r\n    // ---------------------------------\r\n\r\n    constructor(episodeData) {\r\n        this.title = episodeData.episodeTitle;\r\n        this.videoLength = episodeData.details.runtime;\r\n        this.thumbnails = episodeData.youtube.thumbnails;\r\n\r\n        // Air Date\r\n        const dateStr = episodeData.details.airdate;\r\n        // If air date does not exist, assign null\r\n        if (!dateStr || dateStr.length == 0)\r\n            this.airdate = null;\r\n        else { // Else air date does exist\r\n            if (dateStr.includes('/') || dateStr.includes(','))\r\n                this.airdate = new Date(dateStr);\r\n            else\r\n                this.airdate = dateStr;\r\n        }\r\n\r\n        // Host(s)\r\n        if (episodeData.details.host)\r\n            this.host = episodeData.details.host;\r\n\r\n        // Featuring\r\n        if (episodeData.details.featuring)\r\n            this.featuring = episodeData.details.featuring;\r\n\r\n        // Description\r\n        if (Array.isArray(episodeData.details.description) &&\r\n            episodeData.details.description.length) {\r\n            this.description = episodeData.details.description;\r\n        }\r\n\r\n        // YouTube views/likes\r\n        if (episodeData.youtube) {\r\n            // Views\r\n            if (episodeData.youtube.views)\r\n                this.views = parseInt(episodeData.youtube.views, 10);\r\n            // Likes\r\n            if (episodeData.youtube.likes)\r\n                this.likes = parseInt(episodeData.youtube.likes, 10);\r\n            // Dislikes\r\n            if (episodeData.youtube.dislikes)\r\n                this.dislikes = parseInt(episodeData.youtube.dislikes, 10);\r\n        }\r\n\r\n        // YouTube video ID\r\n        let tempVideoID = ''; // Default empty string if NO video ID is found\r\n        if (episodeData.details && episodeData.details.external_links) {\r\n            const youtubeLink = episodeData.details.external_links\r\n                .find(element => element.href.includes('youtube'));\r\n            if (youtubeLink)\r\n                tempVideoID = youtubeLink.href.split('=')[1].slice(0, 11);\r\n        }\r\n        if (tempVideoID) this.youtubeVideoID = tempVideoID;\r\n    }\r\n\r\n    // -----------------------------\r\n    // ---------- Getters ----------\r\n    // -----------------------------\r\n\r\n    // TODO: Perhaps make a property of class instance\r\n    get videoLengthInSeconds() {\r\n        return getVideoLengthInSeconds(this.videoLength);\r\n    }\r\n\r\n    get airDateAsDateTimeAttribute() {\r\n        return `${this.airdate.getFullYear()}-${this.airdate.getMonth() + 1}-${this.airdate.getDate()}`;\r\n    }\r\n\r\n    get likeRatio() {\r\n        if (this.likes && this.dislikes)\r\n            return ((this.likes * 100) / (this.likes + this.dislikes)).toFixed(1);\r\n    }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    getDateString() {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n            \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        return months[this.airdate.getMonth()] + ' ' + this.airdate.getDate() +\r\n            ', ' + this.airdate.getFullYear();\r\n    }\r\n\r\n    /**\r\n     * Returns true if episode contains GI crew name, else false.\r\n     * @param {String} name\r\n     * @returns {Boolean}\r\n     */\r\n    containsCrew(name) {\r\n        // Host\r\n        if (this.host && this.host.includes(name))\r\n            return true;\r\n        // Featuring\r\n        if (this.featuring && this.featuring.includes(name))\r\n            return true;\r\n        // If reach here, return false\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Recursive function to search each property of class instance.\r\n     * @param {String} searchTerm\r\n     * @param {any} obj\r\n     * @returns {Boolean}\r\n     */\r\n    containsSearchTerm(searchTerm, obj = this) {\r\n        // String\r\n        if (typeof obj === 'string') {\r\n            return obj.toLowerCase().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Number\r\n        if (typeof obj === 'number') {\r\n            return obj.toString().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Array\r\n        if (Array.isArray(obj)) {\r\n            return obj.some(element => this.containsSearchTerm(searchTerm, element));\r\n        }\r\n        // Object\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            return Array.from(Object.values(obj))\r\n                .some(value => this.containsSearchTerm(searchTerm, value));\r\n        }\r\n        // Other\r\n        return false;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './PageNumbers.css';\r\nimport { debounce } from '../utilities.js';\r\n\r\nfunction PageNumbers(props) {\r\n    // States\r\n\r\n    const [numDisplayedButtons, setNumDisplayedButtons] = useState(getNumDisplayedButtons());\r\n\r\n    // Constants\r\n\r\n    const lastPage = Math.ceil(props.maxResults / props.resultsPerPage);\r\n    const middlePage = Math.ceil(numDisplayedButtons / 2);\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        const debouncedHandleResize = debounce(function handleResize() {\r\n            const newValue = getNumDisplayedButtons();\r\n            if (newValue !== numDisplayedButtons)\r\n                setNumDisplayedButtons(newValue);\r\n        }, 1000);\r\n\r\n        window.addEventListener('resize', debouncedHandleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', debouncedHandleResize);\r\n        };\r\n    });\r\n\r\n    // Checks if currPage beyond last page\r\n    useEffect(() => {\r\n        if (props.currPage > lastPage)\r\n            props.setCurrPage(lastPage);\r\n    });\r\n\r\n    // Functions\r\n\r\n    /** Returns number of numbered buttons to display depending on window width. */\r\n    function getNumDisplayedButtons() {\r\n        if (window.matchMedia(\"(max-width: 480px)\").matches)\r\n            return 3;\r\n        else if (window.matchMedia(\"(max-width: 750px)\").matches)\r\n            return 5;\r\n        else\r\n            return 7;\r\n    }\r\n\r\n    function goToPage(num) {\r\n        if (props.scrollToTop)\r\n            document.getElementById('top-page').scrollIntoView({ behavior: \"smooth\" });\r\n        props.setCurrPage(num);\r\n    }\r\n\r\n    function goPrevPage() {\r\n        // Return if currPage is 1\r\n        if (props.currPage === 1)\r\n            return;\r\n\r\n        goToPage(props.currPage - 1);\r\n    }\r\n\r\n    function goNextPage() {\r\n        // Return if currPage is last page\r\n        if (props.currPage === lastPage)\r\n            return;\r\n\r\n        goToPage(props.currPage + 1);\r\n    }\r\n\r\n    function createNumberedPageButtons() {\r\n        let numberedPageButtons = [];\r\n        let start, end;\r\n        // If lastPage is more than numDisplayedButtons\r\n        if (lastPage > numDisplayedButtons) {\r\n            if (props.currPage > lastPage - middlePage) {\r\n                // Show last numDisplayedButtons\r\n                start = lastPage - numDisplayedButtons + 1;\r\n                end = lastPage;\r\n            } else if (props.currPage > middlePage) {\r\n                // Show buttons with current page in middle\r\n                start = props.currPage - middlePage + 1;\r\n                end = props.currPage + middlePage - 1;\r\n            } else {\r\n                // Show first numDisplayedButtons\r\n                start = 1;\r\n                end = numDisplayedButtons;\r\n            }\r\n        } else { // Else lastPage is less than or equal to numDisplayedButtons\r\n            // Add buttons ranging from 1 to lastPage\r\n            start = 1;\r\n            end = lastPage;\r\n        }\r\n\r\n        for (let i = start; i <= end; i++) {\r\n            numberedPageButtons.push(\r\n                <button\r\n                    key={i}\r\n                    className={\"custom-button\" + (i === props.currPage ? \" active\" : \"\")}\r\n                    onClick={() => goToPage(i)}\r\n                >\r\n                    {i}\r\n                </button>\r\n            );\r\n        }\r\n        return numberedPageButtons;\r\n    }\r\n\r\n    const pageButtonContainerTemplate = (\r\n        <div className=\"page-button-container\">\r\n            <button\r\n                className=\"custom-button\"\r\n                onClick={goPrevPage}\r\n                // Disable 'PREV' if current page is equal to 1\r\n                disabled={props.currPage === 1}\r\n                type=\"button\"\r\n                value=\"prev\"\r\n            >\r\n                PREV\r\n            </button>\r\n            <button\r\n                className=\"custom-button\"\r\n                onClick={() => goToPage(1)}\r\n                // Disable 'FIRST' if last page is less than or equal to numDisplayedButtons\r\n                // OR current page is near beginning of list\r\n                disabled={\r\n                    lastPage <= numDisplayedButtons ||\r\n                    props.currPage <= middlePage\r\n                }\r\n                type=\"button\"\r\n                value=\"first\"\r\n            >\r\n                FIRST\r\n            </button>\r\n            <div className=\"page-number-container\">\r\n                {createNumberedPageButtons()}\r\n            </div>\r\n            <button\r\n                className=\"custom-button\"\r\n                onClick={() => goToPage(lastPage)}\r\n                // Disable 'LAST' if last page is less than or equal to numDisplayedButtons\r\n                // OR current page is near end of list\r\n                disabled={\r\n                    lastPage <= numDisplayedButtons ||\r\n                    props.currPage >= lastPage - middlePage + 1\r\n                }\r\n                type=\"button\"\r\n                value=\"last\"\r\n            >\r\n                LAST\r\n            </button>\r\n            <button\r\n                className=\"custom-button\"\r\n                onClick={goNextPage}\r\n                // Disable 'NEXT' if current page is equal to last page\r\n                disabled={props.currPage === lastPage}\r\n                type=\"button\"\r\n                value=\"next\"\r\n            >\r\n                NEXT\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (lastPage > 1 ? pageButtonContainerTemplate : null);\r\n}\r\n\r\nexport default PageNumbers;","import React from 'react';\r\n\r\nfunction Thumbnail(props) {\r\n    const defaultImage = props.thumbnails.hasOwnProperty('standard') ?\r\n        props.thumbnails.standard :\r\n        props.thumbnails.default;\r\n\r\n    function createSrcSet() {\r\n        return Object.values(props.thumbnails)\r\n            .reduce((accumulator, currValue, index, arr) => {\r\n                accumulator += `${currValue.url} ${currValue.width}w`;\r\n                if (index < arr.length - 1)\r\n                    accumulator += \", \";\r\n                return accumulator;\r\n            }, \"\");\r\n\r\n        //let temp = \"\";\r\n        //Object.keys(props.thumbnails)\r\n        //    .forEach((key, index, arr) => {\r\n        //        temp += `${props.thumbnails[key].url} ${props.thumbnails[key].width}w`;\r\n        //        if (index < arr.length - 1)\r\n        //            temp += \", \";\r\n        //    });\r\n        //return temp;\r\n    }\r\n\r\n    return (\r\n        <img\r\n            className={props.className}\r\n            alt={props.alt}\r\n            width={defaultImage.width}\r\n            height={defaultImage.height}\r\n            src={defaultImage.url}\r\n            srcSet={createSrcSet()}\r\n            sizes=\"50vw\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default Thumbnail;","import React from 'react';\r\nimport './GameInformerArticle.css';\r\n\r\nfunction GameInformerArticle(props) {\r\n    function createArticleContent() {\r\n        if (!props.article.content) return;\r\n\r\n        return props.article.content.map(\r\n            (para, index) => {\r\n                if (para.replace(/\\s/g, '').length)\r\n                    return <p key={index}>{para}</p>\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"article\">\r\n            <div className=\"article-heading\">\r\n                <h4 className=\"article-title\">{props.article.title}</h4>\r\n                <div className=\"article-author\">\r\n                    {`by ${props.article.author}${props.article.date}`}\r\n                </div>\r\n            </div>\r\n            {createArticleContent()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameInformerArticle;","import React from 'react';\r\nimport './ReplayEpisodeComponent.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPlayCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport Thumbnail from './Thumbnail.js';\r\nimport GameInformerArticle from './GameInformerArticle.js';\r\n//import playButtonImg from '../images/play-button-icon-gi-256.png';\r\nimport { listArrayAsString, addCommasToNumber } from '../utilities.js';\r\nimport ReplayEpisode from '../classes/ReplayEpisode.js';\r\n\r\nfunction ReplayEpisodeComponent(props) {\r\n    function playVideo() {\r\n        props.cuePlaylist(props.replayEpisode.youtubeVideoID);\r\n        document.getElementById('video-player-container')\r\n            .scrollIntoView();\r\n\r\n        //if (!window.youtubePlayer) return;\r\n\r\n        //window.youtubePlayer.cueVideoById(props.replayEpisode.youtubeVideoID);\r\n        //document.getElementById('video-player-container')\r\n        //    .scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    /**\r\n     * @returns {String[]}\r\n     * */\r\n    function createMainSegmentGameList() {\r\n        const gamesArr = props.replayEpisode.mainSegmentGames\r\n            .map(game => game.title);\r\n        return listArrayAsString(gamesArr);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} title\r\n     * @param {String} className\r\n     * @param {String} segment\r\n     * @param {String[]} content\r\n     * @returns {React.Component}\r\n     */\r\n    function createSegmentComponent(title, className, segment, content) {\r\n        if (!content) return;\r\n\r\n        return (\r\n            <div className={className}>\r\n                <b>{`${title}: `}</b>\r\n                {\r\n                    ReplayEpisode.getSegmentTitle(segment)\r\n                    + (content\r\n                        ? ` - ${listArrayAsString(content)}`\r\n                        : null)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Object[]} contentArr\r\n     * @returns {React.Component[]}\r\n     */\r\n    function createDetailsComponent(contentArr) {\r\n        if (!contentArr) return;\r\n\r\n        return contentArr.map(\r\n            (content, index) => {\r\n                // If content is an array, add ul list of values\r\n                if (Array.isArray(content)) {\r\n                    return (\r\n                        <ul key={index}>\r\n                            { content.map((str, listIndex) => (<li key={listIndex}>{str}</li>)) }\r\n                        </ul>\r\n                    );\r\n                }\r\n                // Else create p element\r\n                else {\r\n                    return <p key={index}>{content}</p>\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} headline\r\n     * @returns {React.Component}\r\n     */\r\n    function createListOfLinks(headline, linksArr, urlPrepend) {\r\n        if (!linksArr.length) return null;\r\n\r\n        const linksNodeArr = linksArr.map(\r\n            (link, index) => {\r\n                return (\r\n                    <li key={index}>\r\n                        <i>\r\n                            <a\r\n                                href={urlPrepend ? urlPrepend + link.href : link.href}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener\"\r\n                            >{link.title}</a>\r\n                        </i>\r\n                        {ReplayEpisode.getLinkSource(link.href)}\r\n                    </li>\r\n                );\r\n            }\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <h4>{headline}</h4>\r\n                <ul>{linksNodeArr}</ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} heading\r\n     * @param {Object[]} content\r\n     * @returns {React.Component}\r\n     */\r\n    function createSectionFromHeading(heading, content) {\r\n        switch (heading) {\r\n            case 'see_also':\r\n                return createListOfLinks(\"see also\", content, \"https://replay.fandom.com\")\r\n            case 'gallery':\r\n                return (\r\n                    <div>\r\n                        <h4>gallery</h4>\r\n                        <div className=\"gallery-container\">\r\n                            {\r\n                                content.map((image, index) => (\r\n                                    <div className=\"gallery-item\" key={index}>\r\n                                        <figure>\r\n                                            <figcaption>{image.caption}</figcaption>\r\n                                            <a\r\n                                                href={image.link}\r\n                                                target=\"_blank\"\r\n                                                rel=\"noopener\"\r\n                                            >\r\n                                                <img\r\n                                                    src={image.src}\r\n                                                    width={image.width}\r\n                                                    height={image.height}\r\n                                                    title={image.title}\r\n                                                />\r\n                                            </a>\r\n                                        </figure>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <div>\r\n                        <h4>{heading.replace(/_/g, \" \")}</h4>\r\n                        {createDetailsComponent(content)}\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"episode\">\r\n            <div className=\"episodeMain\">\r\n                <div className=\"episodeHeader\">\r\n                    <h3 className=\"episodeTitle\">{props.replayEpisode.title}</h3>\r\n                    <div className=\"episodeNumber\">{props.replayEpisode.createEpisodeNumberStr()}</div>\r\n                </div>\r\n                <div className=\"thumbnail-container\">\r\n                    <div className=\"episodeThumbnail\">\r\n                        <div className=\"click-to-play\" title=\"\" onClick={playVideo}>\r\n                            <Thumbnail\r\n                                className=\"episodeImage\"\r\n                                thumbnails={props.replayEpisode.thumbnails}\r\n                                alt={`YouTube thumbnail for episode \"${props.replayEpisode.title}\"`}\r\n                            />\r\n                            <time className=\"episodeLength\" dateTime=\"\">{props.replayEpisode.videoLength}</time>\r\n                            <div className=\"playOverlay\">\r\n                                <FontAwesomeIcon icon={faPlayCircle} style={ {width: \"100%\"} } />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"episodeDetails\">\r\n                    <div className=\"episodeAirDate\">\r\n                        <b>Air Date: </b>\r\n                        <time\r\n                            dateTime={props.replayEpisode.airDateAsDateTimeAttribute}\r\n                        >\r\n                            {props.replayEpisode.getDateString()}\r\n                        </time>\r\n                    </div>\r\n                    <div className=\"views-likes-container\">\r\n                        <div className=\"views\" title=\"Views\">\r\n                            <b><FontAwesomeIcon icon={faEye} /></b>\r\n                            {props.replayEpisode.views ? addCommasToNumber(props.replayEpisode.views) : null}\r\n                        </div>\r\n                        <div className=\"likes\" title=\"Likes (Like Ratio)\">\r\n                            <b><FontAwesomeIcon icon={faThumbsUp} /></b>\r\n                            {props.replayEpisode.likes ? `${addCommasToNumber(props.replayEpisode.likes)} (${props.replayEpisode.likeRatio})` : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"gi-crew\">\r\n                        <div className=\"episodeHosts\"><b>Host: </b>{listArrayAsString(props.replayEpisode.host)}</div>\r\n                        <div className=\"episodeFeaturing\"><b>Featuring: </b>{listArrayAsString(props.replayEpisode.featuring)}</div>\r\n                    </div>\r\n                    <div className=\"segments\">\r\n                        <div className=\"mainSegment\"><b>Main Segment: </b>{createMainSegmentGameList()}</div>\r\n                        {createSegmentComponent(\"Middle Segment\", \"middleSegment\", props.replayEpisode.middleSegment, props.replayEpisode.middleSegmentContent)}\r\n                        {createSegmentComponent(\"Second Segment\", \"secondSegment\", props.replayEpisode.secondSegment, props.replayEpisode.secondSegmentGames)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div className=\"episodeMoreInfo\">\r\n                <div className=\"description\">\r\n                    {createDetailsComponent(props.replayEpisode.description)}\r\n                </div>\r\n                <GameInformerArticle article={props.replayEpisode.giArticle} />\r\n                {\r\n                    props.replayEpisode.otherHeadings\r\n                        ? (Object.entries(props.replayEpisode.otherHeadings)\r\n                            .map(entry => createSectionFromHeading(entry[0], entry[1]))\r\n                        )\r\n                        : null\r\n                }\r\n                {createListOfLinks(\"external links\", props.replayEpisode.externalLinks)}\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default ReplayEpisodeComponent;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './FilterSearch.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faSlidersH } from '@fortawesome/free-solid-svg-icons';\r\nimport ReplayEpisode from '../classes/ReplayEpisode';\r\n\r\nfunction FilterSearch(props) {\r\n    // States\r\n\r\n    const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n    // Refs\r\n\r\n    const filterFormRef = useRef(null);\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        if (searchInput !== props.filterObj.search)\r\n            setSearchInput(props.filterObj.search);\r\n    }, [props.filterObj.search]);\r\n\r\n    // Functions\r\n\r\n    function handleFilterToggle(e) {\r\n        e.target.classList.toggle('active');\r\n        filterFormRef.current.style.maxHeight = (\r\n            filterFormRef.current.style.maxHeight\r\n                ? null\r\n                : filterFormRef.current.scrollHeight + 12 + \"px\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} name\r\n     * @param {String|Number} value\r\n     * @param {String|Number} label\r\n     * @param {Boolean} isChecked\r\n     * @todo Create separate component with props: name, value, label, isChecked\r\n     */\r\n    function createSingleFieldListElement(name, value, label) {\r\n        if (label === undefined)\r\n            label = value;\r\n        return (\r\n            <li key={value}>\r\n                <label>\r\n                    {label}\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={name}\r\n                        value={value}\r\n                        checked={props.filterObj[name].has(value)}\r\n                        onChange={props.onChange}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    function createSeasonFieldListElements() {\r\n        let fieldListElements = [];\r\n        for (let i = 1; i <= 6; i++) {\r\n            //isChecked = props.filterProps.season.has(i.toString());\r\n            fieldListElements.push(\r\n                createSingleFieldListElement(\"season\", i.toString())\r\n            );\r\n        }\r\n        fieldListElements.push(createSingleFieldListElement(\"season\", 0, \"Special\"));\r\n\r\n        return (<ul>{fieldListElements}</ul>);\r\n    }\r\n\r\n    function createYearFieldListElements() {\r\n        //console.log('createYearFieldList');\r\n        const currentYear = new Date().getFullYear();\r\n        let fieldListElements = [];\r\n        for (let i = 2010; i <= currentYear; i++) {\r\n            fieldListElements.push(createSingleFieldListElement(\"year\", i.toString()));\r\n        }\r\n\r\n        return (<ul>{fieldListElements}</ul>);\r\n    }\r\n\r\n    function createSegmentFieldListElements() {\r\n        const fieldListElements = ReplayEpisode.getSegmentsForFilterForm()\r\n            .map(\r\n                segment => createSingleFieldListElement(\"segment\", segment.name, `${ReplayEpisode.getSegmentTitle(segment.name)} (${segment.count})`)\r\n            );\r\n        return (<ul>{fieldListElements}</ul>);\r\n    }\r\n\r\n    function createGICrewFieldListElements() {\r\n        const fieldListElements = ReplayEpisode.getGICrewForFilterForm()\r\n            .map(\r\n                person => createSingleFieldListElement(\"giCrew\", person.name, `${person.name} (${person.count})`)\r\n            );\r\n        return (<ul>{fieldListElements}</ul>);\r\n    }\r\n\r\n    function handleSearchOnKeyUp(e) {\r\n        // No. 13 is 'enter' key\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault(); // Cancel default action, if needed\r\n            props.onSearch(searchInput);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"search-filter-container\">\r\n            <div id=\"search-container\">\r\n                <input\r\n                    type=\"search\"\r\n                    placeholder=\"Search...\"\r\n                    required\r\n                    value={searchInput}\r\n                    onKeyUp={handleSearchOnKeyUp}\r\n                    onChange={(e) => setSearchInput(e.target.value)}\r\n                />\r\n                <button\r\n                    className=\"custom-button\"\r\n                    type=\"button\"\r\n                    aria-label=\"search\"\r\n                    onClick={() => { props.onSearch(searchInput); }}\r\n                >\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                </button>\r\n            </div>\r\n\r\n            <button\r\n                id=\"filter-display-toggle-button\"\r\n                className=\"custom-button collapsible\"\r\n                onClick={(e) => handleFilterToggle(e)}\r\n            >\r\n                <FontAwesomeIcon icon={faSlidersH} aria-hidden=\"true\" />\r\n                FILTER\r\n            </button>\r\n            <form\r\n                id=\"filterForm\"\r\n                ref={filterFormRef}\r\n                onReset={props.onReset}\r\n            >\r\n                <div id=\"filterSubmitButton\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"custom-button\"\r\n                        id=\"filter-toggle-select-button\"\r\n                        onClick={() => filterFormRef.current.reset()}\r\n                    >\r\n                        CLEAR ALL\r\n                    </button>\r\n                </div>\r\n\r\n                <fieldset form=\"filterForm\" id=\"seasonField\">\r\n                    <legend>Season: </legend>\r\n                    {createSeasonFieldListElements()}\r\n                </fieldset>\r\n\r\n                <fieldset form=\"filterForm\" id=\"year-field\">\r\n                    <legend>Year: </legend>\r\n                    {createYearFieldListElements()}\r\n                </fieldset>\r\n\r\n                <fieldset form=\"filterForm\" id=\"segment-field\">\r\n                    <legend>Segment: </legend>\r\n                    {createSegmentFieldListElements()}\r\n                </fieldset>\r\n\r\n                <fieldset form=\"filterForm\" id=\"gi-crew-field\">\r\n                    <legend>GI Crew: </legend>\r\n                    {createGICrewFieldListElements()}\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilterSearch;","import React, { useState, useEffect, useReducer, useMemo } from 'react';\r\nimport './ReplayCollection.css';\r\nimport PageNumbers from './PageNumbers.js';\r\nimport ReplayEpisodeComponent from './ReplayEpisodeComponent.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faRandom, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport ReplayEpisode from '../classes/ReplayEpisode.js';\r\nimport { addCommasToNumber, shuffleArray } from '../utilities';\r\nimport FilterSearch from './FilterSearch.js';\r\n\r\n// const [state, dispatch] = useReducer(reducer, initialState)\r\nconst initialState = {\r\n    'selectedEpisodes': ReplayEpisode.collection,\r\n    'sort': {\r\n        'isAscending': false,\r\n        'type': 'airdate',\r\n    },\r\n    'filter': {\r\n        'search': \"\",\r\n        'season': new Set(),\r\n        'year': new Set(),\r\n        'segment': new Set(),\r\n        'giCrew': new Set(),\r\n    },\r\n};\r\n\r\nfunction reducer(prevState, action) {\r\n    switch (action.type) {\r\n        case 'sortByType': // action.value = 'none', 'airdate', 'number', etc.\r\n            let newState = {\r\n                ...prevState,\r\n                'sort': { ...prevState.sort, 'type': action.value },\r\n            };\r\n            if (action.value !== 'none') {\r\n                let newSelectedEpisodes = prevState.selectedEpisodes.slice();\r\n                sortByTypeNew(action.value, newSelectedEpisodes, prevState.sort.isAscending);\r\n                newState['selectedEpisodes'] = newSelectedEpisodes;\r\n            }\r\n            return newState;\r\n        case 'sortByDirection': // action.value = {Boolean}\r\n            if (prevState.sort.isAscending === action.value)\r\n                return prevState;\r\n            return {\r\n                ...prevState,\r\n                'selectedEpisodes': prevState.selectedEpisodes.slice().reverse(),\r\n                'sort': {...prevState.sort, 'isAscending': action.value},\r\n            };\r\n        case 'search': // action.value = {String} search terms\r\n        case 'filter': // action.value = {event.target} name, value, isChecked\r\n            let newFilterState = { ...prevState.filter };\r\n            if (typeof action.value === 'string') {\r\n                newFilterState.search = action.value;\r\n            } else { // Else action.value instanceof EventTarget\r\n                // Add/Remove action.value\r\n                const name = action.value.name; // filter object key\r\n                const value = action.value.value; // value to add/remove to set\r\n                const isChecked = action.value.checked; // bool to add/remove value from set\r\n                // If value needs to be added AND NOT already in Set\r\n                if (isChecked && !prevState.filter[name].has(value)) {\r\n                    let newSet = new Set(prevState.filter[name]);\r\n                    newFilterState[name] = newSet.add(value);\r\n                }\r\n                // Else If value needs to be removed AND is in Set\r\n                else if (!isChecked && prevState.filter[name].has(value)) {\r\n                    let newSet = new Set(prevState.filter[name]);\r\n                    newSet.delete(value);\r\n                    newFilterState[name] = newSet;\r\n                }\r\n                // Else filter state does NOT change\r\n                else {\r\n                    return { ...prevState };\r\n                }\r\n            }\r\n            // Get copy all episodes\r\n            let filteredEpisodes = ReplayEpisode.collection.slice();\r\n            // Sort episodes\r\n            sortByTypeNew(prevState.sort.type, filteredEpisodes, prevState.sort.isAscending);\r\n            // Filter episodes based on new filter state\r\n            filteredEpisodes = filterReplayEpisodesNew(filteredEpisodes, newFilterState);\r\n            return {\r\n                ...prevState,\r\n                'selectedEpisodes': filteredEpisodes,\r\n                'filter': newFilterState,\r\n            };\r\n        case 'reset':\r\n            return initialState;\r\n        case 'shuffle':\r\n            let shuffledEpisodes = prevState.selectedEpisodes.slice();\r\n            shuffleArray(shuffledEpisodes);\r\n            return {\r\n                ...prevState,\r\n                'selectedEpisodes': shuffledEpisodes,\r\n                'sort': { ...prevState.sort, 'type': 'none', },\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\n/**\r\n * Sorts array of ReplayEpisode objects by type in ascending/descending order.\r\n * @param {String} type\r\n * @param {ReplayEpisode[]} episodeArr\r\n * @param {Boolean} isAscending\r\n */\r\nfunction sortByTypeNew(type, episodeArr, isAscending = true) {\r\n    // Sort by type in ascending order\r\n    switch (type) {\r\n        case 'none': break;\r\n        case 'video-length':\r\n            episodeArr.sort((first, second) => first.videoLengthInSeconds - second.videoLengthInSeconds);\r\n            break;\r\n        case 'number':\r\n            episodeArr.sort((first, second) => first.number - second.number);\r\n            break;\r\n        case 'views':\r\n            episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"views\"));\r\n            break;\r\n        case 'likes':\r\n            episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"likes\"));\r\n            break;\r\n        case 'like-ratio':\r\n            episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"likeRatio\"));\r\n            break;\r\n        case 'dislikes':\r\n            episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"dislikes\"));\r\n            break;\r\n        case 'airdate':\r\n        default:\r\n            episodeArr.sort((first, second) => first.airdate - second.airdate);\r\n    }\r\n\r\n    // Reverse if isAscendng is false\r\n    if (!isAscending)\r\n        episodeArr.reverse();\r\n}\r\n\r\n/**\r\n * \r\n * @param {ReplayEpisode[]} replayEpisodesArr\r\n * @param {Object} filterObj\r\n * @param {String} filterObj.search\r\n * @param {Set} filterObj.season\r\n * @param {Set} filterObj.year\r\n * @param {Set} filterObj.segment\r\n * @param {Set} filterObj.giCrew\r\n */\r\nfunction filterReplayEpisodesNew(replayEpisodesArr, filterObj) {\r\n    // Return if filterObj is empty\r\n    if (isFilterEmpty(filterObj)) return replayEpisodesArr;\r\n\r\n    return replayEpisodesArr.filter(episode => {\r\n        // Search\r\n        if (filterObj.search && !episode.containsSearchTerm(filterObj.search))\r\n            return false;\r\n        // Season\r\n        if (filterObj.season.size && !filterObj.season.has(episode.getReplaySeason()[0].toString()))\r\n            return false;\r\n        // Year\r\n        if (filterObj.year.size && !filterObj.year.has(episode.airdate.getFullYear().toString()))\r\n            return false;\r\n        // Segment\r\n        if (filterObj.segment.size\r\n            && !Array.from(filterObj.segment.values())\r\n                .some(segment => episode.containsSegment(segment)))\r\n            return false;\r\n        // GI Crew\r\n        if (filterObj.giCrew.size\r\n            && !Array.from(filterObj.giCrew.values())\r\n                .some(name => episode.containsCrew(name)))\r\n            return false;\r\n\r\n        // If reach here, return true to include in filter\r\n        return true;\r\n    });\r\n}\r\n\r\nfunction isFilterEmpty(filter) {\r\n    return Object.values(filter).every(value => {\r\n        if (!value)\r\n            return true;\r\n        if (typeof value === 'string')\r\n            return !value.length;\r\n        if (value instanceof Set)\r\n            return !value.size;\r\n    });\r\n}\r\n\r\nfunction ReplayCollection() {\r\n    // States\r\n\r\n    //const [selectedEpisodes, setSelectedEpisodes] = useState(ReplayEpisode.collection);\r\n    const [currPage, setCurrPage] = useState(1);\r\n    const [resultsPerPage, setResultsPerPage] = useState(10);\r\n    /*\r\n    const [sort, setSort] = useState({\r\n        'isAscending': false, 'type': 'airdate',\r\n    });\r\n    const [filter, setFilter] = useState({\r\n        'search': null,\r\n        'season': new Set(),\r\n        'year': new Set(),\r\n        'segment': new Set(),\r\n        'giCrew': new Set(),\r\n    });\r\n    */\r\n    // Reducer\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    // Effects\r\n    /*\r\n    // TEMP\r\n    useEffect(() => {\r\n        console.log('State has changed:');\r\n        console.log(state);\r\n    }, [state]);\r\n    /*\r\n    useEffect(() => {\r\n        if (sort.type === 'none') return;\r\n\r\n        let newSelectedEpisodes = selectedEpisodes.slice();\r\n        sortByType(newSelectedEpisodes);\r\n        setSelectedEpisodes(newSelectedEpisodes);\r\n        console.log(\"selectedEpisodes is changed after sort\");\r\n    }, [sort]);\r\n\r\n    useEffect(() => {\r\n        //console.log('Filter has changed');\r\n        //console.log(filter);\r\n\r\n        let newSelectedEpisodes = ReplayEpisode.collection.slice();\r\n        sortByType(newSelectedEpisodes);\r\n        if (isFilterEmpty())\r\n            setSelectedEpisodes(newSelectedEpisodes);\r\n        else\r\n            setSelectedEpisodes(filterReplayEpisodes(newSelectedEpisodes));\r\n        console.log(\"selectedEpisodes is changed after filter\");\r\n    }, [filter]);\r\n    \r\n    // Functions\r\n\r\n    function shuffleSelectedEpisodes() {\r\n        let newSelectedEpisodes = selectedEpisodes.slice();\r\n        shuffleArray(newSelectedEpisodes);\r\n        setSort({ ...sort, 'type': 'none' });\r\n        setSelectedEpisodes(newSelectedEpisodes);\r\n    }\r\n\r\n    function resetSelectedEpisodes() {\r\n        //setSort({ 'isAscending': false, 'type': 'airdate', });\r\n        dispatch({'type': 'reset'});\r\n        setCurrPage(1);\r\n        document.getElementById('filterForm').reset();\r\n        document.querySelector('#search-container > input').value = \"\";\r\n    }\r\n    \r\n    function sortByType(episodeArr) {\r\n        // Sort by type in ascending order\r\n        switch (sort.type) {\r\n            case 'none': break;\r\n            case 'video-length':\r\n                episodeArr.sort((first, second) => first.videoLengthInSeconds - second.videoLengthInSeconds);\r\n                break;\r\n            case 'number':\r\n                episodeArr.sort((first, second) => first.number - second.number);\r\n                break;\r\n            case 'views':\r\n                episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"views\"));\r\n                break;\r\n            case 'likes':\r\n                episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"likes\"));\r\n                break;\r\n            case 'like-ratio':\r\n                episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"likeRatio\"));\r\n                break;\r\n            case 'dislikes':\r\n                episodeArr.sort((first, second) => ReplayEpisode.compareReplayEpisodesByProperty(first, second, \"dislikes\"));\r\n                break;\r\n            case 'airdate':\r\n            default:\r\n                episodeArr.sort((first, second) => first.airdate - second.airdate);\r\n        }\r\n\r\n        // Reverse if isAscending is false\r\n        if (!sort.isAscending)\r\n            episodeArr.reverse();\r\n    }\r\n    \r\n    function handleFilterFormChange(e) {\r\n        dispatch({ 'type': 'filter', 'value': e.target, });\r\n        return;\r\n\r\n        const name = e.target.name; // filter object key\r\n        const value = e.target.value; // value to add/remove to set\r\n        const isChecked = e.target.checked; // bool to add/remove value from set\r\n        console.log(`Name: ${name}\\nValue: ${value}\\nChecked: ${isChecked}`);\r\n        setFilter(prevState => {\r\n            console.log('filter prev: ', prevState[name]);\r\n            if (isChecked && !prevState[name].has(value)) {\r\n                let newSet = new Set(prevState[name])\r\n                console.log('filter new: ', newSet.add(value));\r\n                return { ...prevState, [name]: newSet.add(value) };\r\n            }\r\n            if (!isChecked && prevState[name].has(value)) {\r\n                let newSet = new Set(prevState[name]);\r\n                newSet.delete(value);\r\n                console.log('filter new: ', newSet);\r\n                return { ...prevState, [name]: newSet };\r\n            }\r\n            return prevState;\r\n        });\r\n    }\r\n\r\n    function handleFilterFormReset() {\r\n        console.log('handleFilterFormReset() starts');\r\n        setFilter({\r\n            'search': null,\r\n            'season': new Set(),\r\n            'year': new Set(),\r\n            'segment': new Set(),\r\n            'giCrew': new Set(),\r\n        });\r\n    }\r\n\r\n    function handleSearch(searchTerm) {\r\n        setFilter(prevState => {\r\n            return { ...prevState, 'search': searchTerm };\r\n        });\r\n    }\r\n\r\n    function filterReplayEpisodes(replayEpisodesArr) {\r\n        return replayEpisodesArr.filter(episode => {\r\n            // Search\r\n            if (filter.search && !episode.containsSearchTerm(filter.search))\r\n                return false;\r\n            // Season\r\n            if (filter.season.size && !filter.season.has(episode.getReplaySeason()[0].toString()))\r\n                return false;\r\n            // Year\r\n            if (filter.year.size && !filter.year.has(episode.airdate.getFullYear().toString()))\r\n                return false;\r\n            // Segment\r\n            if (filter.segment.size\r\n                && !Array.from(filter.segment.values())\r\n                    .some(segment => episode.containsSegment(segment)))\r\n                return false;\r\n            // GI Crew\r\n            if (filter.giCrew.size\r\n                && !Array.from(filter.giCrew.values())\r\n                    .some(name => episode.containsCrew(name)))\r\n                return false;\r\n\r\n            // If reach here, return true to include in filter\r\n            return true;\r\n        });\r\n    }\r\n\r\n    function isFilterEmpty() {\r\n        return Object.values(filter).every(value => {\r\n            if (!value)\r\n                return true;\r\n            if (typeof value === 'string')\r\n                return !value.length;\r\n            if (value instanceof Set)\r\n                return !value.size;\r\n        });\r\n    }\r\n    */\r\n\r\n    function createDisplayedEpisodesComponents() {\r\n        //console.log(`createDisplayedEpisodesComponents() has started\\nstate.selectedEpisodes.length: ${state.selectedEpisodes.length}`);\r\n        if (!state.selectedEpisodes.length) return;\r\n\r\n        const start = (currPage - 1) * resultsPerPage;\r\n        const end = Math.min(start + resultsPerPage, state.selectedEpisodes.length);\r\n\r\n        return state.selectedEpisodes.slice(start, end)\r\n            .map((episode, index) => <ReplayEpisodeComponent key={index} replayEpisode={episode} cuePlaylist={cuePlaylist} />);\r\n    }\r\n\r\n    function getSelectedVideoIDArray() {\r\n        let selectedVideoIDArray = [];\r\n        state.selectedEpisodes.forEach(episode => {\r\n            if (episode.youtubeVideoID)\r\n                selectedVideoIDArray.push(episode.youtubeVideoID);\r\n        });\r\n        return selectedVideoIDArray;\r\n    }\r\n\r\n    function cuePlaylist(videoID) {\r\n        if (!window.youtubePlayer) {\r\n            console.error('No reference to video player');\r\n            return;\r\n        }\r\n\r\n        const selectedVideoIdArray = getSelectedVideoIDArray();\r\n        // If NO videoID parameter, cue playlist of first 200 selected episodes\r\n        if (!videoID) {\r\n            if (selectedVideoIdArray.length) {\r\n                window.youtubePlayer.cuePlaylist(selectedVideoIdArray.slice(0, 200));\r\n            } else { // Else no selected episodes, cue Replay highlights video\r\n                window.youtubePlayer.cueVideoById('0ZtEkX8m6yg');\r\n            }\r\n        }\r\n        // Else cue playlist starting with videoID parameter\r\n        else {\r\n            const episodeIndex = selectedVideoIdArray.indexOf(videoID);\r\n            // Check for errors\r\n            if (episodeIndex === -1) {\r\n                console.error(`Requested video ID \"${videoID}\" is NOT in selected episodes array`);\r\n                return;\r\n            }\r\n\r\n            let playlistStartIndex;\r\n            // If more than 200 episodes in selected video array\r\n            if (selectedVideoIdArray.length > 200) {\r\n                // If episodeIndex is within first 200 on selected video array\r\n                if (episodeIndex < 200)\r\n                    playlistStartIndex = 0;\r\n                // Else If episodeIndex is within last 200 (more than 200 total videos)\r\n                // 350 total(0-349) -- 350-200=150 -- 150-349(200 total)\r\n                else if (episodeIndex >= selectedVideoIdArray.length - 200)\r\n                    playlistStartIndex = selectedVideoIdArray.length - 200;\r\n                // Else (episodeIndex is larger than 200, and more than 400 total videos)\r\n                else\r\n                    playlistStartIndex = 200 * Math.floor(episodeIndex / 200);\r\n                // Cue playlist using playlistStartIndex\r\n                window.youtubePlayer.cuePlaylist(selectedVideoIdArray.slice(\r\n                    playlistStartIndex,\r\n                    playlistStartIndex + 200\r\n                ), episodeIndex - playlistStartIndex);\r\n            } else { // Else 200 or less episodes in selected episodes\r\n                window.youtubePlayer.cuePlaylist(selectedVideoIdArray, episodeIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Memo\r\n\r\n    const handleDisplayedVideosMessage = useMemo(() => {\r\n        const start = (currPage - 1) * resultsPerPage;\r\n        const end = Math.min(start + resultsPerPage, state.selectedEpisodes.length);\r\n\r\n        return `Showing ${start + 1} - ${end} of ${state.selectedEpisodes.length} Replay episodes`;\r\n    }, [currPage, resultsPerPage, state.selectedEpisodes.length]);\r\n\r\n    // TODO: Make static function of ReplayEpisode\r\n    const createTotalTimeMessage = useMemo(() => {\r\n        const totalTimeSeconds = ReplayEpisode.totalTimeSeconds;\r\n        const days = Math.floor(totalTimeSeconds / 86400);\r\n        const hours = Math.floor((totalTimeSeconds - days * 86400) / 3600);\r\n        const minutes = Math.floor((totalTimeSeconds - days * 86400 - hours * 3600) / 60);\r\n        const seconds = totalTimeSeconds - (days * 86400) - (hours * 3600) - (minutes * 60);\r\n        return `${days} days, ${hours} hours, ${minutes} minutes, and ${seconds} seconds! (Total seconds: ${addCommasToNumber(totalTimeSeconds)})`;\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <nav id=\"sidenav\" className=\"column left\">\r\n                <FilterSearch\r\n                    onChange={(e) => dispatch({ 'type': 'filter', 'value': e.target, })} // handleFilterFormChange\r\n                    onReset={() => dispatch({ 'type': 'reset', })} // handleFilterFormReset\r\n                    onSearch={(searchTerms) => dispatch({ 'type': 'search', 'value': searchTerms, })} // handleSearch\r\n                    filterObj={state.filter}\r\n                />\r\n            </nav>\r\n            <main>\r\n                <div id=\"misc-buttons-container\">\r\n                    <button\r\n                        className=\"custom-button\"\r\n                        type=\"button\"\r\n                        id=\"button-shuffle\"\r\n                        onClick={() => dispatch({ 'type': 'shuffle', })} // shuffleSelectedEpisodes\r\n                    >\r\n                        <FontAwesomeIcon icon={faRandom} aria-hidden=\"true\" />\r\n                        SHUFFLE\r\n                    </button>\r\n                    <button\r\n                        className=\"custom-button\"\r\n                        type=\"button\"\r\n                        id=\"button-reset-list\"\r\n                        onClick={() => dispatch({ 'type': 'reset', })} // resetSelectedEpisodes\r\n                    >\r\n                        <FontAwesomeIcon icon={faSyncAlt} aria-hidden=\"true\" />\r\n                        RESET LIST\r\n                    </button>\r\n                </div>\r\n                <PageNumbers\r\n                    currPage={currPage}\r\n                    resultsPerPage={resultsPerPage}\r\n                    setCurrPage={setCurrPage}\r\n                    maxResults={state.selectedEpisodes.length}\r\n                />\r\n                <div id=\"sort-main\">\r\n                    <div id=\"number-displayed-container\">\r\n                        {handleDisplayedVideosMessage}\r\n                    </div>\r\n                    <div id=\"sort-container\">\r\n                        <label htmlFor=\"sort-type-select\">\r\n                            Sort:\r\n                            <select\r\n                                name=\"sort-type\"\r\n                                id=\"sort-type-select\"\r\n                                value={state.sort.type} // sort.type\r\n                                onChange={(e) => {\r\n                                    dispatch({ 'type': 'sortByType', 'value': e.target.value, });\r\n                                    //setSort({ ...sort, 'type': e.target.value});\r\n                                }}\r\n                            >\r\n                                <option value=\"none\">-- Sort By --</option>\r\n                                <option value=\"airdate\">Air Date</option>\r\n                                <option value=\"number\">Ep. Number</option>\r\n                                <option value=\"views\">Views</option>\r\n                                <option value=\"likes\">Likes</option>\r\n                                <option value=\"like-ratio\">Like Ratio</option>\r\n                                <option value=\"video-length\">Video Length</option>\r\n                            </select>\r\n                        </label>\r\n\r\n                        <label htmlFor=\"sort-direction-select\">\r\n                            Direction:\r\n                            <select\r\n                                name=\"sort-direction\"\r\n                                id=\"sort-direction-select\"\r\n                                value={state.sort.isAscending ? \"ascending\" : \"descending\"} // sort.isAscending ? \"ascending\" : \"descending\"\r\n                                onChange={(e) => {\r\n                                    dispatch({ 'type': 'sortByDirection', 'value': (e.target.value === \"ascending\") });\r\n                                    //setSort({ ...sort, 'isAscending': e.target.value === \"ascending\"});\r\n                                }}\r\n                            >\r\n                                <option value=\"descending\">Descending</option>\r\n                                <option value=\"ascending\">Ascending</option>\r\n                            </select>\r\n                        </label>\r\n                        <label htmlFor=\"max-displayed-select\">\r\n                            Per Page:\r\n                            <select\r\n                                name=\"max-displayed\"\r\n                                id=\"max-displayed-select\"\r\n                                value={resultsPerPage}\r\n                                onChange={(e) => setResultsPerPage(parseInt(e.target.value, 10))}\r\n                            >\r\n                                <option>5</option>\r\n                                <option>10</option>\r\n                                <option>25</option>\r\n                                <option>50</option>\r\n                                <option>100</option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                {createDisplayedEpisodesComponents()}\r\n                <PageNumbers\r\n                    currPage={currPage}\r\n                    resultsPerPage={resultsPerPage}\r\n                    setCurrPage={setCurrPage}\r\n                    maxResults={state.selectedEpisodes.length}\r\n                    scrollToTop={true}\r\n                />\r\n            </main>\r\n            <div id=\"stats\">\r\n                <h2>Stats:</h2>\r\n                <div id=\"stats-total-time\">\r\n                    <b>Total time of all Replay episodes: </b>\r\n                    {createTotalTimeMessage}\r\n                </div>\r\n                <div id=\"stats-total-views\">\r\n                    <b>Total views of all Replay episodes: </b>\r\n                    {addCommasToNumber(ReplayEpisode.totalViews)}\r\n                </div>\r\n                <div id=\"stats-total-likes\">\r\n                    <b>Total likes of all Replay episodes: </b>\r\n                    {`${addCommasToNumber(ReplayEpisode.totalLikes)} (${(ReplayEpisode.totalLikes * 100 / (ReplayEpisode.totalLikes + ReplayEpisode.totalDislikes)).toFixed(1)}%)`}\r\n                </div>\r\n                <div id=\"stats-games-played\">\r\n                    <b>Games played: </b>\r\n                    {`${addCommasToNumber(ReplayEpisode.gamesPlayed.size + 50)} (estimate)`}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReplayCollection;","import React from 'react';\r\nimport './IsLoading.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction IsLoading() {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <div className='icon'>\r\n                <FontAwesomeIcon icon={faSpinner} />\r\n            </div>\r\n            <h2>Loading...</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IsLoading;","import React, { useEffect, useRef } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronCircleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport './JumpToTop.css';\r\n\r\nfunction JumpToTop() {\r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const mainElement = document.getElementById('top-page');\r\n        window.addEventListener(\"scroll\", () => {\r\n            containerRef.current.style.display = (mainElement.getBoundingClientRect().top < 0)\r\n                ? \"block\"\r\n                : \"none\";\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"jump-top-page-container\"\r\n            title=\"Jump To Top\"\r\n            style={{ \"display\": \"none\" }}\r\n            onClick={() => document.getElementById('top-page').scrollIntoView({ behavior: \"smooth\" })}\r\n            ref={containerRef}\r\n        >\r\n            <div>\r\n                <FontAwesomeIcon\r\n                    icon={faChevronCircleUp}\r\n                    aria-hidden=\"true\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JumpToTop;","import React, { useRef } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport './YouTubePlayer.css';\r\n\r\nfunction YouTubePlayer(props) {\r\n    const videoPlayerRef = useRef(null);\r\n\r\n    const opts = {\r\n        height: 360,\r\n        width: 640,\r\n        //videoId: '0ZtEkX8m6yg', // default video: Replay Highlights\r\n        playerVars: {\r\n            //playlist: ['0ZtEkX8m6yg'],\r\n            iv_load_policy: 3, // video annotations (default: 1)\r\n            modestbranding: 1,\r\n            enablejsapi: 1,\r\n            loop: 0,\r\n            origin: 'https://toddbrentlinger.github.io'\r\n        },\r\n    };\r\n\r\n    function handleOnReady(e) {\r\n        window.youtubePlayer = e.target;\r\n        //props.setYouTubeVideoPlayer(e.target);\r\n        videoPlayerRef.current.classList.remove('hide');\r\n    }\r\n\r\n    return (\r\n        <div ref={videoPlayerRef} id=\"videoPlayer\" className=\"hide\">\r\n            <YouTube\r\n                className=\"iframeWrapper\"\r\n                videoId=\"0ZtEkX8m6yg\"\r\n                opts={opts}\r\n                onReady={(e) => handleOnReady(e)}\r\n                //onStateChange={() => { }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default YouTubePlayer;","import React, { useState, useEffect } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport DarkModeToggleSwitch from './components/DarkModeToggleSwitch.js';\r\nimport FooterCustom from './components/FooterCustom.js';\r\nimport ReplayEpisode from './classes/ReplayEpisode.js';\r\nimport ReplayCollection from './components/ReplayCollection.js';\r\nimport IsLoading from './components/IsLoading.js';\r\nimport JumpToTop from './components/JumpToTop.js';\r\nimport YouTubePlayer from './components/YouTubePlayer.js';\r\n\r\n/*\r\nconst initialState = {\r\n    'display': { 'replay': false, 'superReplay': false },\r\n    'data': { 'replay': [], 'superReplay': [] }\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch (action) {\r\n        case 'replay':\r\n            break;\r\n        case 'superReplay':\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n*/\r\n\r\nfunction App() {\r\n    // States\r\n\r\n    const [selectedChannel, setSelectedChannel] = useState({\r\n        'replay': true,\r\n        'superReplay': false,\r\n        'testChamber': false,\r\n    });\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    //const [youTubeVideoPlayer, setYouTubeVideoPlayer] = useState(null);\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch(\"data/gameInformerReplayFandomWikiData.json\",\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            }\r\n        ).then((response) => response.json()\r\n        ).then((data) => {\r\n            data.forEach(episodeData => new ReplayEpisode(episodeData));\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // Functions\r\n\r\n    function getSelectedChannelTitle() {\r\n        if (selectedChannel.replay)\r\n            return \"Game Informer Replay\";\r\n        if (selectedChannel.superReplay)\r\n            return \"Game Informer Super Replay\";\r\n        if (selectedChannel.testChamber)\r\n            return \"Game Informer Test Chamber\";\r\n        return;\r\n    }\r\n\r\n    function createImageHeader() {\r\n        let srcSet, src;\r\n        if (selectedChannel.replay) {\r\n            srcSet = \"./images/replay-logo-alpha(2)_300.png 300w, ./images/replay-logo-alpha(2).png 610w\";\r\n            src = \"./images/replay-logo-alpha(2).png\";\r\n        } else if (selectedChannel.superReplay) {\r\n\r\n        } else if (selectedChannel.testChamber) {\r\n\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <img\r\n                srcSet={srcSet}\r\n                sizes=\"(max-width: 900px) 300px, 610px\"\r\n                src={src}\r\n                alt={getSelectedChannelTitle() + \" Logo\"}\r\n                width=\"610\"\r\n                height=\"214\"\r\n            />\r\n        );\r\n    }\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <nav id=\"topnav\">\r\n                <div id=\"category-select-btn-container\">\r\n                    <button\r\n                        className={selectedChannel.replay ? \"active\" : null}\r\n                    >Replay</button>\r\n                    <button>Super Replay</button>\r\n                    <button>Test Chamber</button>\r\n                </div>\r\n                <DarkModeToggleSwitch />\r\n            </nav>\r\n            <header>\r\n                <h1>{getSelectedChannelTitle()}</h1>\r\n            </header>\r\n            {createImageHeader()}\r\n            <div id=\"video-player-container\">\r\n                <YouTubePlayer />\r\n            </div>\r\n            <div id=\"top-page\"></div>\r\n            {isLoading ? <IsLoading /> : <ReplayCollection />}\r\n            <JumpToTop />\r\n            <FooterCustom />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import { replayEpisodeCollection } from './objects/replayEpisodeCollection.js';\nimport ReplayEpisode from './classes/ReplayEpisode.js';\n\nwindow.ReplayEpisode = ReplayEpisode; // temp for debugging\n//window.replayEpisodeCollection = replayEpisodeCollection;\n//replayEpisodeCollection.init();\n\n// Global variable for YouTube video player\nwindow.youtubePlayer = null;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}